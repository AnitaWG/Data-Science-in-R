p <- as.POSIXlt(x)
names( unclass(p))
R
about
c <- function(x,n) {
x^3
}
c(3)
x <- 1:10
if (x <5 ) { x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
seq_along
??seq_along
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1 , 9, 3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1:4) + c(0,10)
c(1,2,3,4) +c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
library(swirl)
swirl()
1:20
pi:10
15:1
:
`:`
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq( 5, 10, length=30 )
length(my_seq)
1:length(my_seq)
seq( along= my_seq)
seq_along( my_seq)
rep( 0 , times= 40)
rep( c(0,1,2), times= 10)
rep( c(0,1,2), each=10)
num_vect <- ( 0.5, 55, -10, 6)
num_vect <- c( 0.5, 55, -10, 6)
tf <- num_vect[ num_vect < 1]
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste( my_char, collapse="")
paste( my_char, collapse=" ")
my_name <- c( my_char, 'dcshallot')
my_name
paste( my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste( c("X","Y","Z"), sep="")
paste( 1:3,c("X","Y","Z"), sep="")
paste( LETTERS, 1:4, sep="-")
x <- c( 44, NA, 5, AN)
x <- c( 44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep( NA, 1000)
my_data <- sample( c(y, z) , 100 )
my_na <- is.na( my_data)
my_na
my_data == NA
sum( my_data)
sum( is.na(my_data))
sum( my_na)
my_data
0.0
0/0
Inf[Inf]
Inf-Inf
x
x[1:10]
x[ is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x [!is.na(x) & x >0 ]
x[c(3,5,7)]
x[0]
x[3000]
x[ c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical( vect ,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes( my_vector)
my_vector
class(my_vecotr)
class(my_vecotor)
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix( 1:20, nrow=4, ncol=5)
identical( my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind( patients, my_matrix)
my_data <- data.frame( patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
1
swirl()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
c <- iris[, 1:4 ]
class(c)
c <- as.matrix( iris[, 1:4 ] )
class(c)
View(c)
cachemean(c)
cachemean(c[,1])
makeVector(c[,1])
cachemean( c[,1])
d <- makeVector(c[,1])
cachemean( d)
mean( c[,1])
d <- makeVector(c)
cachemean( d)
mean( c)
solve(c)
dim(c    )
c <- as.matrix( iris[ 1:4, 1:4 ] )
solve(c)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {   ## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setinv(m)
m
}
makeCacheMatrix(c)
d <- makeCacheMatrix(c)
cacheSolve(d)
d <- makeCacheMatrix(c)
cacheSolve(d)
solve(c)
cacheSolve <- function(x, ...) {   ## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
solve(c)
load("~/Dropbox/2014_cyou_predict_model_part/data/log-cons-chrg-analysis.RData")
data <- cbind.data.frame( y=log.cnt$y,
last2week.day, last2week.cnt, day.avg, log.sum, recent3wkper.cnt,
log.diff2,  #登陆
con.last.day , avgn.avg, cons.cuday, cons.cuwk8 ,#消费
chrg.time, chrg.cuwk
# cons= log.cnt$cons ,
)
rm( chrg.amt,chrg.cuwk,chrg.time,
last2week.cnt, last2week.day, log.cnt, log.day, avgn.avg,
con.last.day, cons.amt, cons.cuday, cons.cuwk8,
day.avg, log.diff2, log.sum, recent3wkper.cnt)
index <- sample( nrow(data),  nrow(data) * 0.7)
train <- data[ index , ]
test <- data[ -index , ]
library(randomForest)
data4rf <- train
names(data4rf) <- paste( "v",1:15, sep="")
rforest <- randomForest( y ~ . , data = data4rf )
rforest <- randomForest( v1 ~ . , data = data4rf )
rslt <- function( model) { # model test
z <- ( predict( model, test, type="response") > 0.5 )
zz<- table(z, test$y , dnn =c("pred","act")) # 混淆矩阵
out <- list( c.m = zz,
accuracy = 1-( sum(zz) - sum(diag(zz)))/sum(zz) , # 查准率
cover = sum(zz[1,1]/sum(zz[,1])) # Y=0查全率
)
return(out)
}
rslt( rforest )
p.f <- predict( rforest, newdata= test[,-1] )
test4rf <- test
names(test4rf) <- paste( "v",1:15, sep="")
p.f <- predict( rforest, newdata= test4rf[,-1] )
zz <- table( test$y, ifelse( p.f > 0.5, 1,0)  )
1-( sum(zz) - sum(diag(zz)))/sum(zz) # 查准率
sum(zz[1,1]/sum(zz[,1])) # Y=0查全率
??randomForest
x <- list( a= 1:5, b = rnorm(10) )
lapply( x , mean)
x <- matrix( rnorm(200), 20, 10 )
rowSums = apply( x, 1, sum) # 这两者实现功能一样，但是左边的更快一些！
apply( x , 1, quantile , probs=c( 0.25, 0.75))
apply( x, 1, function(x) list( q= quantile , probs=c( 0.25, 0.75) ,
median = median(x)))
apply( x, 1, function(x) list( q= quantile , probs=c( 0.25, 0.75) ,
median = median(x) ，
r= range(x)) )
apply( x, 1, function(x) list( q= quantile , probs=c( 0.25, 0.75) ,
median = median(x) ,
r= range(x)) )
x <- c( rnorm(10), runif(10), rnorm(10,1) )
f <- gl(3, 10)
??gl
x <- c( rnorm(10), runif(10), rnorm(10,1) )
f <- gl(3, 10) # gl function : gnerate factor levels
tapply( x , f , mean)
s <- split( airquality, airquality$Month)
lapply( s, function(x) colMeans( x[ , c("Ozne", "Solar.R", "Wind")]))
lapply( s, function(x) colMeans( x[ , c("Ozne", "Solar.R", "Wind")]))
lapply( s, function(x) colMeans( x[ , c("Ozone", "Solar.R", "Wind")]))
sapply( s, function(x) colMeans( x[ , c("Ozone", "Solar.R", "Wind")]))
sapply( s, function(x) colMeans( x[ , c("Ozone", "Solar.R", "Wind")], na.rm= T ))
tapply( airquality[ , c( "Ozone", "Solar.R", "Wind" )], airquality$Month, means )
tapply( airquality[ , c( "Ozone", "Solar.R", "Wind" )], airquality$Month, mean )
tapply( airquality[ ,  "Ozone" )], airquality$Month, mean )
tapply( airquality[ ,  "Ozone" ], airquality$Month, mean )
tapply( airquality[ ,  "Ozone" ], airquality$Month, mean , na.rm=T )
tapply( airquality[ ,  "Wind" ], airquality$Month, mean , na.rm=T )
f1 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1, f2)
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1, f2)
split( x, list(f1, f2))
mean(x)
traceback()
lm( y ~ x )
traceback()
debug(lm)
lm( y ~ x )
load("~/Dropbox/2014_cyou_predict_model_part/data/log-cons-chrg-analysis.RData")
data <- cbind.data.frame( y=log.cnt$y,
last2week.day, last2week.cnt, day.avg, log.sum, recent3wkper.cnt,
log.diff2,  #登陆
con.last.day , avgn.avg, cons.cuday, cons.cuwk8 ,#消费
chrg.time, chrg.cuwk
# cons= log.cnt$cons ,
)
rm( chrg.amt,chrg.cuwk,chrg.time,
last2week.cnt, last2week.day, log.cnt, log.day, avgn.avg,
con.last.day, cons.amt, cons.cuday, cons.cuwk8,
day.avg, log.diff2, log.sum, recent3wkper.cnt)
index <- sample( nrow(data),  nrow(data) * 0.7)
train <- data[ index , ]
test <- data[ -index , ]
rslt <- function( model) { # model test
z <- ( predict( model, test, type="response") > 0.5 )
zz<- table(z, test$y , dnn =c("pred","act")) # 混淆矩阵
out <- list( c.m = zz,
accuracy = 1-( sum(zz) - sum(diag(zz)))/sum(zz) , # 查准率
cover = sum(zz[1,1]/sum(zz[,1])) # Y=0查全率
)
return(out)
}
iris.mds <- cmdscale(1 - iris.rfproximity,eig=TRUE)
library( randomForest)
iris.mds <- cmdscale(1 - iris.rfproximity,eig=TRUE)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
setwd("~/Desktop/datasciencecoursera/rprog-data-ProgAssignment3-data/")
source("rankall.R")
submit()
submit()
outcome="heart attack"; num=3
data <- read.csv("outcome-of-care-measures.csv", header= T, stringsAsFactors = F )
data[,11] <- as.numeric( data[,11])
data[,17] <- as.numeric( data[,17])
data[,23] <- as.numeric( data[,23])
ot <- c("heart attack", "heart failure", "pneumonia")
o1 <- split( data[, c(2, 7,11, 17,23) ], data$State)
out <- data.frame()
o1[1]
for ( i in 1: length(o1)) {
o2 <- o1[[i]]
# o2 <- o1[[1]]
names(o2)[3:5] <- c("heart attack", "heart failure", "pneumonia")
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2[Hospital.Name]) , ]
num <- ifelse( num=="best", 1, num)
num <- ifelse( num=="worst", length(o2), num)
num <- as.numeric(num)
bh <- o2[ num ,c(2,1)]
bh[1,2] <- ifelse( num> nrow(o2), o2[1,2], bh[1,2])
names(bh) <- c("state","hospital")
out <- rbind(out, bh)
}
for ( i in 1: length(o1)) {
o2 <- o1[[i]]
# o2 <- o1[[1]]
names(o2)[3:5] <- c("heart attack", "heart failure", "pneumonia")
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2["Hospital.Name"]) , ]
num <- ifelse( num=="best", 1, num)
num <- ifelse( num=="worst", length(o2), num)
num <- as.numeric(num)
bh <- o2[ num ,c(2,1)]
bh[1,2] <- ifelse( num> nrow(o2), o2[1,2], bh[1,2])
names(bh) <- c("state","hospital")
out <- rbind(out, bh)
}
View(out)
source("rankall.R")
rankall("heart attack",20)
source("rankall.R")
rankall("heart attack",20)
View(`o2`)
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2["Hospital.Name"]) , ]
View(`o2`)
View(`o2`)
num <- as.numeric(num)
num <- ifelse( num=="best", 1, num)
num <- ifelse( num=="worst", length(o2), num)
bh <- o2[ num ,c(2,1)]
View(bh)
bh <- o2[ num ,c(1,2)]
View(bh)
View(bh)
View(bh)
View(bh)
source("rankall.R")
rankall("heart attack",20)
View(bh)
source("rankall.R")
rankall("heart attack",20)
tail(rankall("pneumonia","worst"),3)
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
nrow(o2)
rankall("pneumonia","worst")
source("rankall.R")
rankall("pneumonia","worst")
head(out)
bh
head(o2)
num
nrow(o2)
o2
nrow(o2)
num
num='worst'
num
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
rankall("heart attack",20)
head( rankall("heart attack",20), 10 )
rankall("heart failure",10)
tail( rankall("heart failure",10), 10 )
outcome="heart failure"; num=10
i <- 55
data <- read.csv("outcome-of-care-measures.csv", header= T, stringsAsFactors = F )
data[,11] <- as.numeric( data[,11])
data[,17] <- as.numeric( data[,17])
data[,23] <- as.numeric( data[,23])
o1 <- split( data[, c(2, 7,11, 17,23) ], data$State)
out <- data.frame()
o2 <- o1[[i]]
i <- 51
o2 <- o1[[i]]
View(`o2`)
names(o2)[3:5] <- c("heart attack", "heart failure", "pneumonia")
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2["Hospital.Name"]) , ]
View(`o2`)
tail( rankall("heart failure"), 10 )
source("rankall.R")
tail( rankall("heart failure"), 10 )
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
tail( rankall("pneumonia","worst"),3)
outcome="pneumonia"; num='worst'
i <- 51
o2 <- o1[[i]]
names(o2)[3:5] <- c("heart attack", "heart failure", "pneumonia")
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2["Hospital.Name"]) , ]
View(`o2`)
i <- 54
o2 <- o1[[i]]
names(o2)[3:5] <- c("heart attack", "heart failure", "pneumonia")
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2["Hospital.Name"]) , ]
View(`o2`)
o2 <- o2[ !is.na( o2[ outcome]) , ]
View(`o2`)
i <- 53
o2 <- o1[[i]]
names(o2)[3:5] <- c("heart attack", "heart failure", "pneumonia")
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2["Hospital.Name"]) , ]
View(`o2`)
i <- 52
o2 <- o1[[i]]
names(o2)[3:5] <- c("heart attack", "heart failure", "pneumonia")
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2["Hospital.Name"]) , ]
View(`o2`)
i <- 51
o2 <- o1[[i]]
names(o2)[3:5] <- c("heart attack", "heart failure", "pneumonia")
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2["Hospital.Name"]) , ]
View(`o2`)
i <- 50
o2 <- o1[[i]]
names(o2)[3:5] <- c("heart attack", "heart failure", "pneumonia")
o2 <- o2[ !is.na( o2[ outcome]) , ]
o2 <- o2[ order(o2[outcome], o2["Hospital.Name"]) , ]
View(`o2`)
tail( rankall("heart failure"), 10 )
submit()
